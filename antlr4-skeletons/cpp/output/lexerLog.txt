Line# 1: Token <INT> Lexeme int
Line# 1: Token <ID> Lexeme main
Line# 1: Token <LPAREN> Lexeme (
Line# 1: Token <RPAREN> Lexeme )
Line# 1: Token <LCURL> Lexeme {
Line# 2: Token <INT> Lexeme int
Line# 2: Token <ID> Lexeme a
Line# 2: Token <COMMA> Lexeme ,
Line# 2: Token <ID> Lexeme b
Line# 2: Token <COMMA> Lexeme ,
Line# 2: Token <ID> Lexeme c
Line# 2: Token <COMMA> Lexeme ,
Line# 2: Token <ID> Lexeme d
Line# 2: Token <COMMA> Lexeme ,
Line# 2: Token <ID> Lexeme i
Line# 2: Token <COMMA> Lexeme ,
Line# 2: Token <ID> Lexeme J
Line# 2: Token <COMMA> Lexeme ,
Line# 2: Token <ID> Lexeme p
Line# 2: Token <SEMICOLON> Lexeme ;
Line# 3: Token <ID> Lexeme b
Line# 3: Token <ASSIGNOP> Lexeme =
Line# 3: Token <CONST_INT> Lexeme 0
Line# 3: Token <SEMICOLON> Lexeme ;
Line# 4: Token <ID> Lexeme c
Line# 4: Token <ASSIGNOP> Lexeme =
Line# 4: Token <CONST_INT> Lexeme 0
Line# 4: Token <SEMICOLON> Lexeme ;
Line# 5: Token <FOR> Lexeme for
Line# 5: Token <LPAREN> Lexeme (
Line# 5: Token <ID> Lexeme i
Line# 5: Token <ASSIGNOP> Lexeme =
Line# 5: Token <CONST_INT> Lexeme 0
Line# 5: Token <SEMICOLON> Lexeme ;
Line# 5: Token <ID> Lexeme i
Line# 5: Token <CONST_INT> Lexeme 4
Line# 5: Token <SEMICOLON> Lexeme ;
Line# 5: Token <ID> Lexeme i
Line# 5: Token <INCOP> Lexeme ++
Line# 5: Token <RPAREN> Lexeme )
Line# 5: Token <LCURL> Lexeme {
Line# 6: Token <ID> Lexeme a
Line# 6: Token <ASSIGNOP> Lexeme =
Line# 6: Token <CONST_INT> Lexeme 3
Line# 6: Token <SEMICOLON> Lexeme ;
Line# 7: Token <WHILE> Lexeme while
Line# 7: Token <LPAREN> Lexeme (
Line# 7: Token <ID> Lexeme a
Line# 7: Token <DECOP> Lexeme --
Line# 7: Token <RPAREN> Lexeme )
Line# 7: Token <LCURL> Lexeme {
Line# 8: Token <FOR> Lexeme for
Line# 8: Token <LPAREN> Lexeme (
Line# 8: Token <ID> Lexeme p
Line# 8: Token <ASSIGNOP> Lexeme =
Line# 8: Token <CONST_INT> Lexeme 0
Line# 8: Token <SEMICOLON> Lexeme ;
Line# 8: Token <ID> Lexeme p
Line# 8: Token <CONST_INT> Lexeme 5
Line# 8: Token <SEMICOLON> Lexeme ;
Line# 8: Token <ID> Lexeme p
Line# 8: Token <INCOP> Lexeme ++
Line# 8: Token <RPAREN> Lexeme )
Line# 8: Token <LCURL> Lexeme {
Line# 9: Token <ID> Lexeme c
Line# 9: Token <INCOP> Lexeme ++
Line# 9: Token <SEMICOLON> Lexeme ;
Line# 10: Token <PRINTLN> Lexeme println
Line# 10: Token <LPAREN> Lexeme (
Line# 10: Token <ID> Lexeme c
Line# 10: Token <RPAREN> Lexeme )
Line# 10: Token <SEMICOLON> Lexeme ;
Line# 11: Token <RCURL> Lexeme }
Line# 12: Token <ID> Lexeme b
Line# 12: Token <INCOP> Lexeme ++
Line# 12: Token <SEMICOLON> Lexeme ;
Line# 13: Token <RCURL> Lexeme }
Line# 14: Token <RCURL> Lexeme }
Line# 15: Token <SINGLE LINE COMMENT> Lexeme // for ( i = 0; i < 3; i++)
Line# 16: Token <SINGLE LINE COMMENT> Lexeme // {
Line# 17: Token <SINGLE LINE COMMENT> Lexeme //     for (J = 0; J < 4; J++)
Line# 18: Token <SINGLE LINE COMMENT> Lexeme //     {
Line# 19: Token <SINGLE LINE COMMENT> Lexeme //         for ( p = 0; p < 5; p++)
Line# 20: Token <SINGLE LINE COMMENT> Lexeme //         {
Line# 21: Token <SINGLE LINE COMMENT> Lexeme //             c++;
Line# 22: Token <SINGLE LINE COMMENT> Lexeme //             println(c);
Line# 23: Token <SINGLE LINE COMMENT> Lexeme //         }
Line# 25: Token <SINGLE LINE COMMENT> Lexeme //     }
Line# 27: Token <SINGLE LINE COMMENT> Lexeme // }
Line# 29: Token <PRINTLN> Lexeme println
Line# 29: Token <LPAREN> Lexeme (
Line# 29: Token <ID> Lexeme a
Line# 29: Token <RPAREN> Lexeme )
Line# 29: Token <SEMICOLON> Lexeme ;
Line# 30: Token <PRINTLN> Lexeme println
Line# 30: Token <LPAREN> Lexeme (
Line# 30: Token <ID> Lexeme b
Line# 30: Token <RPAREN> Lexeme )
Line# 30: Token <SEMICOLON> Lexeme ;
Line# 31: Token <PRINTLN> Lexeme println
Line# 31: Token <LPAREN> Lexeme (
Line# 31: Token <ID> Lexeme c
Line# 31: Token <RPAREN> Lexeme )
Line# 31: Token <SEMICOLON> Lexeme ;
Line# 32: Token <RCURL> Lexeme }
