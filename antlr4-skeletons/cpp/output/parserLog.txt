Line 1: type_specifier : INT

int

Line 1: declaration_list : ID

i

Line 1: declaration_list : declaration_list COMMA ID

i,j

Line 1: var_declaration : type_specifier declaration_list SEMICOLON

int i,j;

Line 1: unit : var_declaration

int i,j;

Line 1: program : unit

int i,j;

Line 2: type_specifier : INT

int

Line 4: type_specifier : INT

int

Line 4: declaration_list : ID

k

Line 4: declaration_list : declaration_list COMMA ID

k,ll

Line 4: declaration_list : declaration_list COMMA ID

k,ll,m

Line 4: declaration_list : declaration_list COMMA ID

k,ll,m,n

Line 4: declaration_list : declaration_list COMMA ID

k,ll,m,n,o

Line 4: declaration_list : declaration_list COMMA ID

k,ll,m,n,o,p

Line 4: var_declaration : type_specifier declaration_list SEMICOLON

int k,ll,m,n,o,p;

Line 4: statement : var_declaration

int k,ll,m,n,o,p;


Line 4: statements : statement

int k,ll,m,n,o,p;


Line 6: variable : ID

i

Line 6: factor : CONST_INT

1

Line 6: unary_expression : factor

1

Line 6: term : unary_expression

1

Line 6: simple_expression : term

1

Line 6: rel_expression : simple_expression

1

Line 6: logic_expression : rel_expression

1

Line 6: expression : variable ASSIGNOP logic_expression

i=1

Line 6: expression_statement : expression SEMICOLON

i=1;


Line 6: statement : expression_statement

i=1;



Line 6: statements : statements statement

int k,ll,m,n,o,p;
i=1;



Line 7: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(i);


Line 7: statements : statements statement

int k,ll,m,n,o,p;
i=1;

println(i);


Line 9: variable : ID

j

Line 9: factor : CONST_INT

5

Line 9: unary_expression : factor

5

Line 9: term : unary_expression

5

Line 9: simple_expression : term

5

Line 9: factor : CONST_INT

8

Line 9: unary_expression : factor

8

Line 9: term : unary_expression

8

Line 9: simple_expression : simple_expression ADDOP term

5+8

Line 9: rel_expression : simple_expression

5+8

Line 9: logic_expression : rel_expression

5+8

Line 9: expression : variable ASSIGNOP logic_expression

j=5+8

Line 9: expression_statement : expression SEMICOLON

j=5+8;


Line 9: statement : expression_statement

j=5+8;



Line 9: statements : statements statement

int k,ll,m,n,o,p;
i=1;

println(i);
j=5+8;



Line 10: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(j);


Line 10: statements : statements statement

int k,ll,m,n,o,p;
i=1;

println(i);
j=5+8;

println(j);


Line 12: variable : ID

k

Line 12: variable : ID

i

Line 12: factor : variable

i

Line 12: unary_expression : factor

i

Line 12: term : unary_expression

i

Line 12: simple_expression : term

i

Line 12: factor : CONST_INT

2

Line 12: unary_expression : factor

2

Line 12: term : unary_expression

2

Line 12: variable : ID

j

Line 12: factor : variable

j

Line 12: unary_expression : factor

j

Line 12: term : term MULOP unary_expression

2*j

Line 12: simple_expression : simple_expression ADDOP term

i+2*j

Line 12: rel_expression : simple_expression

i+2*j

Line 12: logic_expression : rel_expression

i+2*j

Line 12: expression : variable ASSIGNOP logic_expression

k=i+2*j

Line 12: expression_statement : expression SEMICOLON

k=i+2*j;


Line 12: statement : expression_statement

k=i+2*j;



Line 12: statements : statements statement

int k,ll,m,n,o,p;
i=1;

println(i);
j=5+8;

println(j);
k=i+2*j;



Line 13: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(k);


Line 13: statements : statements statement

int k,ll,m,n,o,p;
i=1;

println(i);
j=5+8;

println(j);
k=i+2*j;

println(k);


Line 15: variable : ID

m

Line 15: variable : ID

k

Line 15: factor : variable

k

Line 15: unary_expression : factor

k

Line 15: term : unary_expression

k

Line 15: factor : CONST_INT

9

Line 15: unary_expression : factor

9

Line 15: term : term MULOP unary_expression

k%9

Line 15: simple_expression : term

k%9

Line 15: rel_expression : simple_expression

k%9

Line 15: logic_expression : rel_expression

k%9

Line 15: expression : variable ASSIGNOP logic_expression

m=k%9

Line 15: expression_statement : expression SEMICOLON

m=k%9;


Line 15: statement : expression_statement

m=k%9;



Line 15: statements : statements statement

int k,ll,m,n,o,p;
i=1;

println(i);
j=5+8;

println(j);
k=i+2*j;

println(k);
m=k%9;



Line 16: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(m);


Line 16: statements : statements statement

int k,ll,m,n,o,p;
i=1;

println(i);
j=5+8;

println(j);
k=i+2*j;

println(k);
m=k%9;

println(m);


Line 18: variable : ID

n

Line 18: variable : ID

m

Line 18: factor : variable

m

Line 18: unary_expression : factor

m

Line 18: term : unary_expression

m

Line 18: simple_expression : term

m

Line 18: variable : ID

ll

Line 18: factor : variable

ll

Line 18: unary_expression : factor

ll

Line 18: term : unary_expression

ll

Line 18: simple_expression : term

ll

Line 18: rel_expression : simple_expression RELOP simple_expression

m<=ll

Line 18: logic_expression : rel_expression

m<=ll

Line 18: expression : variable ASSIGNOP logic_expression

n=m<=ll

Line 18: expression_statement : expression SEMICOLON

n=m<=ll;


Line 18: statement : expression_statement

n=m<=ll;



Line 18: statements : statements statement

int k,ll,m,n,o,p;
i=1;

println(i);
j=5+8;

println(j);
k=i+2*j;

println(k);
m=k%9;

println(m);
n=m<=ll;



Line 19: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(n);


Line 19: statements : statements statement

int k,ll,m,n,o,p;
i=1;

println(i);
j=5+8;

println(j);
k=i+2*j;

println(k);
m=k%9;

println(m);
n=m<=ll;

println(n);


Line 21: variable : ID

o

Line 21: variable : ID

i

Line 21: factor : variable

i

Line 21: unary_expression : factor

i

Line 21: term : unary_expression

i

Line 21: simple_expression : term

i

Line 21: variable : ID

j

Line 21: factor : variable

j

Line 21: unary_expression : factor

j

Line 21: term : unary_expression

j

Line 21: simple_expression : term

j

Line 21: rel_expression : simple_expression RELOP simple_expression

i!=j

Line 21: logic_expression : rel_expression

i!=j

Line 21: expression : variable ASSIGNOP logic_expression

o=i!=j

Line 21: expression_statement : expression SEMICOLON

o=i!=j;


Line 21: statement : expression_statement

o=i!=j;



Line 21: statements : statements statement

int k,ll,m,n,o,p;
i=1;

println(i);
j=5+8;

println(j);
k=i+2*j;

println(k);
m=k%9;

println(m);
n=m<=ll;

println(n);
o=i!=j;



Line 22: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(o);


Line 22: statements : statements statement

int k,ll,m,n,o,p;
i=1;

println(i);
j=5+8;

println(j);
k=i+2*j;

println(k);
m=k%9;

println(m);
n=m<=ll;

println(n);
o=i!=j;

println(o);


Line 24: variable : ID

p

Line 24: variable : ID

n

Line 24: factor : variable

n

Line 24: unary_expression : factor

n

Line 24: term : unary_expression

n

Line 24: simple_expression : term

n

Line 24: rel_expression : simple_expression

n

Line 24: variable : ID

o

Line 24: factor : variable

o

Line 24: unary_expression : factor

o

Line 24: term : unary_expression

o

Line 24: simple_expression : term

o

Line 24: rel_expression : simple_expression

o

Line 24: logic_expression : rel_expression LOGICOP rel_expression

n||o

Line 24: expression : variable ASSIGNOP logic_expression

p=n||o

Line 24: expression_statement : expression SEMICOLON

p=n||o;


Line 24: statement : expression_statement

p=n||o;



Line 24: statements : statements statement

int k,ll,m,n,o,p;
i=1;

println(i);
j=5+8;

println(j);
k=i+2*j;

println(k);
m=k%9;

println(m);
n=m<=ll;

println(n);
o=i!=j;

println(o);
p=n||o;



Line 25: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(p);


Line 25: statements : statements statement

int k,ll,m,n,o,p;
i=1;

println(i);
j=5+8;

println(j);
k=i+2*j;

println(k);
m=k%9;

println(m);
n=m<=ll;

println(n);
o=i!=j;

println(o);
p=n||o;

println(p);


Line 27: variable : ID

p

Line 27: variable : ID

n

Line 27: factor : variable

n

Line 27: unary_expression : factor

n

Line 27: term : unary_expression

n

Line 27: simple_expression : term

n

Line 27: rel_expression : simple_expression

n

Line 27: variable : ID

o

Line 27: factor : variable

o

Line 27: unary_expression : factor

o

Line 27: term : unary_expression

o

Line 27: simple_expression : term

o

Line 27: rel_expression : simple_expression

o

Line 27: logic_expression : rel_expression LOGICOP rel_expression

n&&o

Line 27: expression : variable ASSIGNOP logic_expression

p=n&&o

Line 27: expression_statement : expression SEMICOLON

p=n&&o;


Line 27: statement : expression_statement

p=n&&o;



Line 27: statements : statements statement

int k,ll,m,n,o,p;
i=1;

println(i);
j=5+8;

println(j);
k=i+2*j;

println(k);
m=k%9;

println(m);
n=m<=ll;

println(n);
o=i!=j;

println(o);
p=n||o;

println(p);
p=n&&o;



Line 28: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(p);


Line 28: statements : statements statement

int k,ll,m,n,o,p;
i=1;

println(i);
j=5+8;

println(j);
k=i+2*j;

println(k);
m=k%9;

println(m);
n=m<=ll;

println(n);
o=i!=j;

println(o);
p=n||o;

println(p);
p=n&&o;

println(p);


Line 30: variable : ID

p

Line 30: factor : variable INCOP

p++

Line 30: unary_expression : factor

p++

Line 30: term : unary_expression

p++

Line 30: simple_expression : term

p++

Line 30: rel_expression : simple_expression

p++

Line 30: logic_expression : rel_expression

p++

Line 30: expression : logic_expression

p++

Line 30: expression_statement : expression SEMICOLON

p++;


Line 30: statement : expression_statement

p++;



Line 30: statements : statements statement

int k,ll,m,n,o,p;
i=1;

println(i);
j=5+8;

println(j);
k=i+2*j;

println(k);
m=k%9;

println(m);
n=m<=ll;

println(n);
o=i!=j;

println(o);
p=n||o;

println(p);
p=n&&o;

println(p);
p++;



Line 31: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(p);


Line 31: statements : statements statement

int k,ll,m,n,o,p;
i=1;

println(i);
j=5+8;

println(j);
k=i+2*j;

println(k);
m=k%9;

println(m);
n=m<=ll;

println(n);
o=i!=j;

println(o);
p=n||o;

println(p);
p=n&&o;

println(p);
p++;

println(p);


Line 33: variable : ID

k

Line 33: variable : ID

p

Line 33: factor : variable

p

Line 33: unary_expression : factor

p

Line 33: unary_expression : ADDOP unary_expression

-p

Line 33: term : unary_expression

-p

Line 33: simple_expression : term

-p

Line 33: rel_expression : simple_expression

-p

Line 33: logic_expression : rel_expression

-p

Line 33: expression : variable ASSIGNOP logic_expression

k=-p

Line 33: expression_statement : expression SEMICOLON

k=-p;


Line 33: statement : expression_statement

k=-p;



Line 33: statements : statements statement

int k,ll,m,n,o,p;
i=1;

println(i);
j=5+8;

println(j);
k=i+2*j;

println(k);
m=k%9;

println(m);
n=m<=ll;

println(n);
o=i!=j;

println(o);
p=n||o;

println(p);
p=n&&o;

println(p);
p++;

println(p);
k=-p;



Line 34: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(k);


Line 34: statements : statements statement

int k,ll,m,n,o,p;
i=1;

println(i);
j=5+8;

println(j);
k=i+2*j;

println(k);
m=k%9;

println(m);
n=m<=ll;

println(n);
o=i!=j;

println(o);
p=n||o;

println(p);
p=n&&o;

println(p);
p++;

println(p);
k=-p;

println(k);


Line 36: factor : CONST_INT

0

Line 36: unary_expression : factor

0

Line 36: term : unary_expression

0

Line 36: simple_expression : term

0

Line 36: rel_expression : simple_expression

0

Line 36: logic_expression : rel_expression

0

Line 36: expression : logic_expression

0

Line 36: statement : RETURN expression SEMICOLON

return 0;


Line 36: statements : statements statement

int k,ll,m,n,o,p;
i=1;

println(i);
j=5+8;

println(j);
k=i+2*j;

println(k);
m=k%9;

println(m);
n=m<=ll;

println(n);
o=i!=j;

println(o);
p=n||o;

println(p);
p=n&&o;

println(p);
p++;

println(p);
k=-p;

println(k);
return 0;


Line 37: compound_statement : LCURL statements RCURL

{
int k,ll,m,n,o,p;
i=1;

println(i);
j=5+8;

println(j);
k=i+2*j;

println(k);
m=k%9;

println(m);
n=m<=ll;

println(n);
o=i!=j;

println(o);
p=n||o;

println(p);
p=n&&o;

println(p);
p++;

println(p);
k=-p;

println(k);
return 0;
}


ScopeTable # 1.1
0 --> < p : ID >
2 --> < k : ID >< ll : ID >
4 --> < m : ID >
5 --> < n : ID >
6 --> < o : ID >
ScopeTable # 1
0 --> < i : ID >
1 --> < j : ID >
6 --> < main : ID >


Line 37: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int k,ll,m,n,o,p;
i=1;

println(i);
j=5+8;

println(j);
k=i+2*j;

println(k);
m=k%9;

println(m);
n=m<=ll;

println(n);
o=i!=j;

println(o);
p=n||o;

println(p);
p=n&&o;

println(p);
p++;

println(p);
k=-p;

println(k);
return 0;
}



Line 37: unit : func_definition

int main(){
int k,ll,m,n,o,p;
i=1;

println(i);
j=5+8;

println(j);
k=i+2*j;

println(k);
m=k%9;

println(m);
n=m<=ll;

println(n);
o=i!=j;

println(o);
p=n||o;

println(p);
p=n&&o;

println(p);
p++;

println(p);
k=-p;

println(k);
return 0;
}


Line 37: program : program unit

int i,j;

int main(){
int k,ll,m,n,o,p;
i=1;
println(i);
j=5+8;
println(j);
k=i+2*j;
println(k);
m=k%9;
println(m);
n=m<=ll;
println(n);
o=i!=j;
println(o);
p=n||o;
println(p);
p=n&&o;
println(p);
p++;
println(p);
k=-p;
println(k);
return 0;
}



Line 37: start : program

ScopeTable # 1
0 --> < i : ID >
1 --> < j : ID >
6 --> < main : ID >

Total number of lines: 37
Total number of errors: 0
