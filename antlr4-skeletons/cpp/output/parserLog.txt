Line 1: type_specifier : INT

int

Line 2: type_specifier : INT

int

Line 2: declaration_list : ID

a

Line 2: declaration_list : declaration_list COMMA ID

a,b

Line 2: declaration_list : declaration_list COMMA ID

a,b,c

Line 2: declaration_list : declaration_list COMMA ID

a,b,c,d

Line 2: declaration_list : declaration_list COMMA ID

a,b,c,d,i

Line 2: declaration_list : declaration_list COMMA ID

a,b,c,d,i,J

Line 2: declaration_list : declaration_list COMMA ID

a,b,c,d,i,J,p

Line 2: var_declaration : type_specifier declaration_list SEMICOLON

int a,b,c,d,i,J,p;

Line 2: statement : var_declaration

int a,b,c,d,i,J,p;


Line 2: statements : statement

int a,b,c,d,i,J,p;


Line 3: variable : ID

b

Line 3: factor : CONST_INT

0

Line 3: unary_expression : factor

0

Line 3: term : unary_expression

0

Line 3: simple_expression : term

0

Line 3: rel_expression : simple_expression

0

Line 3: logic_expression : rel_expression

0

Line 3: expression : variable ASSIGNOP logic_expression

b=0

Line 3: expression_statement : expression SEMICOLON

b=0;


Line 3: statement : expression_statement

b=0;



Line 3: statements : statements statement

int a,b,c,d,i,J,p;
b=0;



Line 4: variable : ID

c

Line 4: factor : CONST_INT

0

Line 4: unary_expression : factor

0

Line 4: term : unary_expression

0

Line 4: simple_expression : term

0

Line 4: rel_expression : simple_expression

0

Line 4: logic_expression : rel_expression

0

Line 4: expression : variable ASSIGNOP logic_expression

c=0

Line 4: expression_statement : expression SEMICOLON

c=0;


Line 4: statement : expression_statement

c=0;



Line 4: statements : statements statement

int a,b,c,d,i,J,p;
b=0;

c=0;



Line 5: variable : ID

i

Line 5: factor : CONST_INT

0

Line 5: unary_expression : factor

0

Line 5: term : unary_expression

0

Line 5: simple_expression : term

0

Line 5: rel_expression : simple_expression

0

Line 5: logic_expression : rel_expression

0

Line 5: expression : variable ASSIGNOP logic_expression

i=0

Line 5: expression_statement : expression SEMICOLON

i=0;


Line 5: variable : ID

i

Line 5: factor : variable

i

Line 5: unary_expression : factor

i

Line 5: term : unary_expression

i

Line 5: simple_expression : term

i

Line 5: factor : CONST_INT

4

Line 5: unary_expression : factor

4

Line 5: term : unary_expression

4

Line 5: simple_expression : term

4

Line 5: rel_expression : simple_expression RELOP simple_expression

i<4

Line 5: logic_expression : rel_expression

i<4

Line 5: expression : logic_expression

i<4

Line 5: expression_statement : expression SEMICOLON

i<4;


Line 5: variable : ID

i

Line 5: factor : variable INCOP

i++

Line 5: unary_expression : factor

i++

Line 5: term : unary_expression

i++

Line 5: simple_expression : term

i++

Line 5: rel_expression : simple_expression

i++

Line 5: logic_expression : rel_expression

i++

Line 5: expression : logic_expression

i++

Line 6: variable : ID

a

Line 6: factor : CONST_INT

3

Line 6: unary_expression : factor

3

Line 6: term : unary_expression

3

Line 6: simple_expression : term

3

Line 6: rel_expression : simple_expression

3

Line 6: logic_expression : rel_expression

3

Line 6: expression : variable ASSIGNOP logic_expression

a=3

Line 6: expression_statement : expression SEMICOLON

a=3;


Line 6: statement : expression_statement

a=3;



Line 6: statements : statement

a=3;



Line 7: variable : ID

a

Line 7: factor : variable DECOP

a--

Line 7: unary_expression : factor

a--

Line 7: term : unary_expression

a--

Line 7: simple_expression : term

a--

Line 7: rel_expression : simple_expression

a--

Line 7: logic_expression : rel_expression

a--

Line 7: expression : logic_expression

a--

Line 8: variable : ID

p

Line 8: factor : CONST_INT

0

Line 8: unary_expression : factor

0

Line 8: term : unary_expression

0

Line 8: simple_expression : term

0

Line 8: rel_expression : simple_expression

0

Line 8: logic_expression : rel_expression

0

Line 8: expression : variable ASSIGNOP logic_expression

p=0

Line 8: expression_statement : expression SEMICOLON

p=0;


Line 8: variable : ID

p

Line 8: factor : variable

p

Line 8: unary_expression : factor

p

Line 8: term : unary_expression

p

Line 8: simple_expression : term

p

Line 8: factor : CONST_INT

5

Line 8: unary_expression : factor

5

Line 8: term : unary_expression

5

Line 8: simple_expression : term

5

Line 8: rel_expression : simple_expression RELOP simple_expression

p<5

Line 8: logic_expression : rel_expression

p<5

Line 8: expression : logic_expression

p<5

Line 8: expression_statement : expression SEMICOLON

p<5;


Line 8: variable : ID

p

Line 8: factor : variable INCOP

p++

Line 8: unary_expression : factor

p++

Line 8: term : unary_expression

p++

Line 8: simple_expression : term

p++

Line 8: rel_expression : simple_expression

p++

Line 8: logic_expression : rel_expression

p++

Line 8: expression : logic_expression

p++

Line 9: variable : ID

c

Line 9: factor : variable INCOP

c++

Line 9: unary_expression : factor

c++

Line 9: term : unary_expression

c++

Line 9: simple_expression : term

c++

Line 9: rel_expression : simple_expression

c++

Line 9: logic_expression : rel_expression

c++

Line 9: expression : logic_expression

c++

Line 9: expression_statement : expression SEMICOLON

c++;


Line 9: statement : expression_statement

c++;



Line 9: statements : statement

c++;



Line 10: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(c);


Line 10: statements : statements statement

c++;

println(c);


Line 11: compound_statement : LCURL statements RCURL

{
c++;

println(c);
}


ScopeTable # 1.1.1.1.1
ScopeTable # 1.1.1.1
ScopeTable # 1.1.1
ScopeTable # 1.1
0 --> < b : ID >< i : ID >< p : ID >
1 --> < c : ID >
2 --> < d : ID >
4 --> < J : ID >
6 --> < a : ID >
ScopeTable # 1
6 --> < main : ID >


Line 11: statement : compound_statement

{
c++;

println(c);
}



Line 11: statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement

for(p=0;
p<5;
p++){
c++;

println(c);
}



Line 8: statements : statement

for(p=0;
p<5;
p++){
c++;

println(c);
}



Line 12: variable : ID

b

Line 12: factor : variable INCOP

b++

Line 12: unary_expression : factor

b++

Line 12: term : unary_expression

b++

Line 12: simple_expression : term

b++

Line 12: rel_expression : simple_expression

b++

Line 12: logic_expression : rel_expression

b++

Line 12: expression : logic_expression

b++

Line 12: expression_statement : expression SEMICOLON

b++;


Line 12: statement : expression_statement

b++;



Line 12: statements : statements statement

for(p=0;
p<5;
p++){
c++;

println(c);
}

b++;



Line 13: compound_statement : LCURL statements RCURL

{
for(p=0;
p<5;
p++){
c++;

println(c);
}

b++;

}


ScopeTable # 1.1.1.1
ScopeTable # 1.1.1
ScopeTable # 1.1
0 --> < b : ID >< i : ID >< p : ID >
1 --> < c : ID >
2 --> < d : ID >
4 --> < J : ID >
6 --> < a : ID >
ScopeTable # 1
6 --> < main : ID >


Line 13: statement : compound_statement

{
for(p=0;
p<5;
p++){
c++;

println(c);
}

b++;

}



Line 13: statement : WHILE LPAREN expression RPAREN statement

while(a--){
for(p=0;
p<5;
p++){
c++;

println(c);
}

b++;

}



Line 13: statements : statements statement

a=3;

while(a--){
for(p=0;
p<5;
p++){
c++;

println(c);
}

b++;

}



Line 14: compound_statement : LCURL statements RCURL

{
a=3;

while(a--){
for(p=0;
p<5;
p++){
c++;

println(c);
}

b++;

}

}


ScopeTable # 1.1.1
ScopeTable # 1.1
0 --> < b : ID >< i : ID >< p : ID >
1 --> < c : ID >
2 --> < d : ID >
4 --> < J : ID >
6 --> < a : ID >
ScopeTable # 1
6 --> < main : ID >


Line 14: statement : compound_statement

{
a=3;

while(a--){
for(p=0;
p<5;
p++){
c++;

println(c);
}

b++;

}

}



Line 14: statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement

for(i=0;
i<4;
i++){
a=3;

while(a--){
for(p=0;
p<5;
p++){
c++;

println(c);
}

b++;

}

}



Line 14: statements : statements statement

int a,b,c,d,i,J,p;
b=0;

c=0;

for(i=0;
i<4;
i++){
a=3;

while(a--){
for(p=0;
p<5;
p++){
c++;

println(c);
}

b++;

}

}



Line 29: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(a);


Line 29: statements : statements statement

int a,b,c,d,i,J,p;
b=0;

c=0;

for(i=0;
i<4;
i++){
a=3;

while(a--){
for(p=0;
p<5;
p++){
c++;

println(c);
}

b++;

}

}

println(a);


Line 30: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(b);


Line 30: statements : statements statement

int a,b,c,d,i,J,p;
b=0;

c=0;

for(i=0;
i<4;
i++){
a=3;

while(a--){
for(p=0;
p<5;
p++){
c++;

println(c);
}

b++;

}

}

println(a);
println(b);


Line 31: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(c);


Line 31: statements : statements statement

int a,b,c,d,i,J,p;
b=0;

c=0;

for(i=0;
i<4;
i++){
a=3;

while(a--){
for(p=0;
p<5;
p++){
c++;

println(c);
}

b++;

}

}

println(a);
println(b);
println(c);


Line 32: compound_statement : LCURL statements RCURL

{
int a,b,c,d,i,J,p;
b=0;

c=0;

for(i=0;
i<4;
i++){
a=3;

while(a--){
for(p=0;
p<5;
p++){
c++;

println(c);
}

b++;

}

}

println(a);
println(b);
println(c);
}


ScopeTable # 1.1
0 --> < b : ID >< i : ID >< p : ID >
1 --> < c : ID >
2 --> < d : ID >
4 --> < J : ID >
6 --> < a : ID >
ScopeTable # 1
6 --> < main : ID >


Line 32: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int a,b,c,d,i,J,p;
b=0;

c=0;

for(i=0;
i<4;
i++){
a=3;

while(a--){
for(p=0;
p<5;
p++){
c++;

println(c);
}

b++;

}

}

println(a);
println(b);
println(c);
}



Line 32: unit : func_definition

int main(){
int a,b,c,d,i,J,p;
b=0;

c=0;

for(i=0;
i<4;
i++){
a=3;

while(a--){
for(p=0;
p<5;
p++){
c++;

println(c);
}

b++;

}

}

println(a);
println(b);
println(c);
}


Line 32: program : unit

int main(){
int a,b,c,d,i,J,p;
b=0;

c=0;

for(i=0;
i<4;
i++){
a=3;

while(a--){
for(p=0;
p<5;
p++){
c++;

println(c);
}

b++;

}

}

println(a);
println(b);
println(c);
}



Line 32: start : program

ScopeTable # 1
6 --> < main : ID >

Total number of lines: 32
Total number of errors: 0
